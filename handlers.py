import sqlite3
from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from keyboards import earn_menu_keyboard, earn_more_keyboard, cancel_keyboard, withdrawals_keyboard, \
    click_inline_keyboard, main_menu_keyboard, earn_more_inline_keyboard
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command


class ExchangeCoins(StatesGroup):
    waiting_for_amount = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã


class Withdrawall(StatesGroup):
    waiting_for_amount = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã


async def start_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    args = message.get_args()  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã /start

    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute("SELECT user_id FROM users WHERE user_id=?", (user_id,))
    user = cursor.fetchone()

    if not user:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("INSERT INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
        conn.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        if args.startswith("ref_"):
            try:
                referrer_id = int(args.split("_")[1])

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                cursor.execute("SELECT user_id FROM users WHERE user_id=?", (referrer_id,))
                referrer = cursor.fetchone()

                if referrer:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É referrals
                    cursor.execute(
                        "INSERT INTO referrals (user_id, referral_user_id) VALUES (?, ?)",
                        (referrer_id, user_id)
                    )

                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ total_referrals –¥–ª—è –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
                    cursor.execute(
                        "UPDATE users SET total_referrals = total_referrals + 1 WHERE user_id=?",
                        (referrer_id,)
                    )

                    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
                    cursor.execute(
                        "UPDATE users SET balance_egp = balance_egp + 60 WHERE user_id=?",
                        (referrer_id,)
                    )

                    # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    cursor.execute(
                        "UPDATE users SET balance_egp = balance_egp + 60 WHERE user_id=?",
                        (user_id,)
                    )

                    conn.commit()

            except (ValueError, IndexError):
                # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
                pass

    conn.close()

    await message.answer(
        "Welcome! You have successfully registered.",
        reply_markup=main_menu_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å"
async def earn_handler(message: Message):
    await message.answer("Select an action:", reply_markup=earn_menu_keyboard())  # –ú–µ–Ω—é —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "Click" –≤ –æ–±—ã—á–Ω–æ–º –º–µ–Ω—é
async def click_menu_handler(message: Message):
    await message.answer("You have started the click process! Click on the button below:",
                         reply_markup=click_inline_keyboard())


async def click_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã
    cursor.execute("""
        SELECT clicks_today, progress, miner_level, balance_hash 
        FROM users 
        WHERE user_id=?
    """, (user_id,))
    user_data = cursor.fetchone()

    if user_data:
        clicks_today, progress, miner_level, balance_hash = user_data

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –≤ 100 –∫–ª–∏–∫–æ–≤ —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
        if clicks_today >= 100:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
            await callback_query.message.edit_text(
                "You have completed 100 out of 100 possible tasks.\n"
                "New missions will appear within 24 hours.\n"
                "You can earn a lot more money on this channel.",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("Earn money", url="https://t.me/your_channel_link")
                )
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∫–ª–∏–∫
            await callback_query.answer("You have reached the click limit for today.")
        else:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤
            clicks_today += 1

            # –†–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress = int((clicks_today / 100) * 100)  # –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            if progress > 100:
                progress = 100  # –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100%

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –∑–∞ –∫–ª–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
            coins_per_click = 100 * miner_level  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è

            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –≤ –±–∞–ª–∞–Ω—Å —Ö—ç—à–∞
            balance_hash += coins_per_click

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("""
                UPDATE users 
                SET clicks_today = ?, progress = ?, balance_hash = ? 
                WHERE user_id = ?
            """, (clicks_today, progress, balance_hash, user_id))
            conn.commit()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            message_text = (
                f"üìÖ Today: {clicks_today} / 100\n"
                f"üìà Progress: {progress}%\n"
                f"ü™ô Coin click: {coins_per_click}\n"
                f"‚õèÔ∏è Mining level: {miner_level}\n"
                f"üíé Balance: {balance_hash}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            try:
                await callback_query.message.edit_text(
                    message_text,
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton("‚õèÔ∏èClick", callback_data="‚õèÔ∏èclick")
                    )
                )
            except Exception as e:
                print(f"Error editing the message: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∫–ª–∏–∫
            await callback_query.answer("You have clicked on the Click button!")

    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —ç—Ç–æ–º
        await callback_query.answer("The user was not found. Please register.")

    conn.close()


async def process_exchange(message: Message, state: FSMContext):
    user_id = message.from_user.id
    amount = message.text

    try:
        amount = int(amount)
    except ValueError:
        await message.answer("Please enter the correct number.")
        return

    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT balance_hash FROM users WHERE user_id=?", (user_id,))
    user_data = cursor.fetchone()
    if user_data:
        balance_hash = user_data[0]
        max_egp = balance_hash // 200  # –ö—É—Ä—Å –æ–±–º–µ–Ω–∞

        if amount <= 0:
            await message.answer("The amount exchanged cannot be negative or zero.")
        elif amount > max_egp:
            await message.answer(f"You can exchange no more than {max_egp} EGP.")
        else:
            coins_to_exchange = amount * 200  # 1 EGP = 200 coins
            new_balance_hash = balance_hash - coins_to_exchange

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
            cursor.execute("UPDATE users SET balance_hash=? WHERE user_id=?", (new_balance_hash, user_id))
            cursor.execute("SELECT balance_egp FROM users WHERE user_id=?", (user_id,))
            user_data_egp = cursor.fetchone()
            if user_data_egp:
                balance_egp = user_data_egp[0] + amount
                cursor.execute("UPDATE users SET balance_egp=? WHERE user_id=?", (balance_egp, user_id))
                conn.commit()

                await message.answer(
                    f"Successfully exchanged {amount} EGP\n"
                    f"Your new balance: {balance_egp} EGP"
                )
            else:
                await message.answer("An error occurred when updating your balance.")
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    conn.close()


async def cancel_handler(message: Message, state: FSMContext):
    if await state.get_state() is not None:
        await state.finish()
    await message.answer("You are back in the main menu.", reply_markup=main_menu_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
async def level_up_handler(message: Message):
    user_id = message.from_user.id
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT miner_level, balance_hash FROM users WHERE user_id=?", (user_id,))
    user_data = cursor.fetchone()

    if user_data:
        miner_level, balance_hash = user_data

        # –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
        upgrade_costs = [80000, 160000]  # –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è 2-–≥–æ –∏ 3-–≥–æ —É—Ä–æ–≤–Ω–µ–π
        next_level_cost = None
        if miner_level < 3:
            next_level_cost = upgrade_costs[miner_level - 1] if miner_level > 0 else upgrade_costs[0]

            if balance_hash >= next_level_cost:
                # –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –º–∞–π–Ω–µ—Ä–∞
                miner_level += 1
                balance_hash -= next_level_cost

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                cursor.execute("UPDATE users SET miner_level=?, balance_hash=? WHERE user_id=?",
                               (miner_level, balance_hash, user_id))
                conn.commit()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
                await message.answer(
                    f"Congratulations! Your miner level has increased to {miner_level}. "
                    f"Now you get 2 times more hash per click.",
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton("Raise the miner's level", callback_data="level_up")
                    )
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
                await message.answer(
                    f"You don't have enough {next_level_cost - balance_hash} coins to level up. "
                    f"Required amount for improvement: {next_level_cost}.",
                )
        else:
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            await message.answer(
                "You have the maximum miner level. Further improvements are not provided."
            )
    conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é
async def back_to_menu_handler(message: Message):
    await message.answer("You are back in the main menu.", reply_markup=main_menu_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "FAQ"
async def faq_handler(message: Message):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å FAQ
    faq_text = (
        "What kind of bot is this?\n"
        "- With this Telegram bot, you can earn money by clicking the 'Click' button.\n\n"

        "How does it work?\n"
        " is pretty simple. Each of your clicks gets a certain amount of power on our servers, "
        "which allows you to mine cryptocurrency in the shortest possible time.\n\n"

        "How do I start earning?\n"
        " Is easy! Click the 'Mining' button, and then click the 'Click' button.\n"
        "- For each click you will receive a certain number of coins, which in the future will allow you to "
        "convert coins to bitcoins, and then exchange bitcoins for EGP and withdraw money.\n\n"

        "I have a certain amount of coins, what's next?\n"
        "- Then you need to click the 'Exchange coins' button and exchange coins for Bitcoin.\n\n"

        "How to exchange bitcoins for EGP? How to withdraw money?\n"
        "- To withdraw money, you need to go to the main menu and click the 'Withdraw funds' button. "
        "Then choose any convenient way for you to receive your money.\n"
        "- !!! Remember that withdrawal is available from level 3!!!\n\n"

        "How to level up and why?\n"
        "- Each level allows you to get more coins per click. For example, at the first level you get 25 coins per click, "
        "at the second level - 60 coins. Also, you need level 3 to withdraw money.\n"
        "- To level up, you must have a certain number of coins. For example, to advance to the second level, "
        "you need to have 12,500 coins. If you have this amount of coins, go to the 'Mining' menu and click the"
        "'Improve Miner level' button, and then the 'Upgrade' button.\n\n"

        "How to earn more?\n"
        "- To earn more, we have introduced a referral system and tasks from sponsors.\n\n"

        "How to make money in the referral system?\n"
        "- To do this, you will receive a personal link 'Money to a friend' in the menu. Take this link and send it to your friends "
        "or post it in various sources: for example, on Facebook or Tik-Tok.\n"
        "- There are also levels in this system. At the first level, you will receive 100 EGP per person, at the second level - 200 EGP.\n\n"

        "What are the sponsor's objectives?\n"
        "So that we can pay everyone on our bot, we advertise different people and companies.\n"
        "- In order to actively use our advertising, we also pay you for it. Go to the 'More Money' menu and read"
        "the rules regarding sponsor orders.\n\n"

        "Where will we get the money to pay users?\n"
        " is simple. Cryptocurrencies bring in a lot of money today. That's why we came up with this method of mining cryptocurrency, "
        "so that all participants would make a profit.\n"
        "In addition, we advertise to various bloggers and companies closely related to cryptocurrency.\n\n"

        "How long will it take for the money to be transferred to my account?\n"
        "- It takes 3-7 business days, depending on the load on the payment systems.\n\n"

        "!! An important condition for successful withdrawal !!\n"
        "- You must subscribe to our sponsor's channel and view every new post on his channel within 2 days. "
        "You can find the channel by clicking the 'More money' button."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å FAQ
    await message.answer(faq_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
async def profile_handler(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_id = message.from_user.id
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –≤–∫–ª—é—á–∞—è balance_egp
    cursor.execute(
        "SELECT username, balance_hash, balance_egp, miner_level, total_referrals FROM users WHERE user_id = ?",
        (user_id,))
    user = cursor.fetchone()
    conn.close()

    if user:
        username = user[0] if user[0] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        balance_hash = user[1]
        balance_egp = user[2]  # –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å EGP
        miner_level = user[3]
        total_referrals = user[4]  # –ï—Å–ª–∏ –≤—ã –¥–æ–±–∞–≤–ª—è–ª–∏ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

        profile_text = (
            f"üë§ My profile:\n"
            f"üè∑Ô∏è Name: {username}\n"
            f"üí∞ EGP balance: {balance_egp}\n"
            f"üíé Hash balance: {balance_hash}\n"
            f"‚õèÔ∏è Miner's level: {miner_level}\n"
            f"üë• Invited friends: {total_referrals}"  # Show the number of invited friends
        )
    else:
        profile_text = "Profile not found. Please try again."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
    await message.answer(profile_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ"
async def earn_more_handler(message: types.Message):
    await message.answer(
        "üí∞ DO YOU WANT 1200 EGP FOR A SUBSCRIPTION TO THE CHANNEL?! üì£\n\n"
        "‚úÖ Subscribe to the channel and watch 20 messages, then come back here and \n"
        "üëâ click \"Get bonus\". You will receive 1200 EGP üí∏\n\n"
        "‚ö†Ô∏è Note: If you unsubscribe, the bonus will not remain üö´",
        reply_markup=earn_more_inline_keyboard()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ"
async def earn_more(message: types.Message):
    await message.answer(
        "üöÄ DO YOU WANT TO EARN MORE?! üí∞\n\n"
             "‚úÖ Subscribe to the channel and watch 20 messages üëÅÔ∏è",
        reply_markup=earn_more_keyboard()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    )


async def withdrawals_handler(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±–∞–Ω–∫–∞–º–∏
    await message.answer("Select a bank for withdrawal:", reply_markup=withdrawals_keyboard())


async def exchange_coins_handler(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT balance_hash FROM users WHERE user_id=?", (user_id,))
    user_data = cursor.fetchone()
    if user_data:
        balance_hash = user_data[0]
        max_egp = balance_hash // 200  # –ö—É—Ä—Å: 200 —Ö—ç—à = 1 EGP

        await message.answer(
            f"üí± Enter the EGP amount you want to exchange with coins\n"
            f"üí∞ Your available balance: {balance_hash} coins\n"
            f"‚¨ÜÔ∏è Maximum amount: {max_egp} EGP\n"
            f"üîÑ Exchange rate: 200 hash = 1 EGP",
            reply_markup=cancel_keyboard()  # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await ExchangeCoins.waiting_for_amount.set()
    else:
        await message.answer("Error: Information about your balance could not be found.")

    conn.close()


async def withdrawall(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT balance_egp FROM users WHERE user_id=?", (user_id,))
    user_data = cursor.fetchone()
    if user_data:
        balance_egp = user_data[0]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±–∞–Ω–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        selected_bank = message.text  # –ë–∞–Ω–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª
        await state.update_data(selected_bank=selected_bank)

        await message.answer(
            f"Enter the EGP amount you want to withdraw\n"
            f"Your available balance: {balance_egp} EGP\n",
            reply_markup=cancel_keyboard()  # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã
        await Withdrawall.waiting_for_amount.set()

    conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
async def process_amount_input(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–∫–µ –∏ –±–∞–ª–∞–Ω—Å–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    selected_bank = user_data.get('selected_bank')

    user_id = message.from_user.id
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    cursor.execute("SELECT balance_egp FROM users WHERE user_id=?", (user_id,))
    user_data = cursor.fetchone()
    if user_data:
        balance_egp = user_data[0]

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É –≤ —á–∏—Å–ª–æ
        amount = float(message.text)
    except ValueError:
        await message.answer("Mistake! Please enter the correct withdrawal amount.")
        return

    if amount <= 0:
        await message.answer("Mistake! The amount must be positive.")
    elif amount > balance_egp:
        await message.answer("Mistake! You don't have enough funds in your balance.")
    else:
        await message.answer("For withdrawal, you must have level 3.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    conn.close()


async def check_subscription_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
    cursor.execute("SELECT bonus_received FROM users WHERE user_id=?", (user_id,))
    user_data = cursor.fetchone()

    if user_data:
        bonus_received = user_data[0]

        if bonus_received == 1:
            # –ï—Å–ª–∏ –±–æ–Ω—É—Å —É–∂–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.answer("You have already received a subscription bonus!")
            await callback_query.message.edit_text("You have already received your subscription bonus.")
        else:
            # –ï—Å–ª–∏ –±–æ–Ω—É—Å –µ—â–µ –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω, –Ω–∞—á–∏—Å–ª—è–µ–º EGP –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥
            cursor.execute("UPDATE users SET balance_egp = balance_egp + 1200, bonus_received = 1 WHERE user_id=?",
                           (user_id,))
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞
            await callback_query.answer("Congratulations! You have received a 1200 EGP subscription bonus.")
            await callback_query.message.edit_text("You have successfully subscribed and received 1200 EGP!")

    conn.close()


async def referral_handler(message: Message):
    user_id = message.from_user.id
    referral_link = f"https://t.me/hackaton_kotiki_bot?start=ref_{user_id}"
    await message.answer(
        f"üéâ Invite your friends with your unique link and get bonuses! üéÅ\n\n"
             f"üîó Your link: {referral_link}",
        reply_markup=main_menu_keyboard()
    )


def get_top_players(user_id):
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ balance_egp –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
    cursor.execute("SELECT user_id, username, balance_egp FROM users ORDER BY balance_egp DESC")
    users = cursor.fetchall()

    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_place = None
    for i, user in enumerate(users):
        if user[0] == user_id:
            user_place = i + 1
            break

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ø-3 –∏–≥—Ä–æ–∫–æ–≤
    top_players = users[:3]
    conn.close()

    return top_players, user_place


def clean_text(text):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã—Ö –ø–∞—Ä."""
    return text.encode('utf-16', 'surrogatepass').decode('utf-16')


async def top_handler(message: Message):
    user_id = message.from_user.id

    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —É–±—ã–≤–∞–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞
    cursor.execute("SELECT username, balance_egp FROM users ORDER BY balance_egp DESC LIMIT 3")
    top_users = cursor.fetchall()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT COUNT(*) FROM users WHERE balance_egp > (SELECT balance_egp FROM users WHERE user_id=?)",
                   (user_id,))
    position = cursor.fetchone()[0] + 1

    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ø–∞
    response = f"üèÜ Today you are in {position}th place!\n\n"
    response += "üéÅ To receive a prize, you must be among the top three players in terms of account balance ‚ú®:\n"
    response += "-----------------------------\n"
    prizes = [175000, 135000, 95000]

    for idx, (username, balance) in enumerate(top_users):
        medal = "ü•á" if idx == 0 else "ü•à" if idx == 1 else "ü•â"
        response +=f"{medal} {username}\n Current balance: {balance} EGP\n Prize: {prizes[idx]} EGP\n-----------------------------\n"

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    response = clean_text(response)

    await message.answer(response)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_handler, commands=["start"])
    dp.register_message_handler(earn_handler, lambda message: message.text == "üç¨Earn")
    dp.register_message_handler(earn_more_handler,
                                lambda message: message.text == "ü•ÇEarn more")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∑–¥–µ—Å—å
    dp.register_message_handler(click_menu_handler, lambda message: message.text == "‚õèÔ∏èClick")
    dp.register_message_handler(level_up_handler, lambda message: message.text == "‚¨ÜÔ∏èlead the miner's node")
    dp.register_message_handler(withdrawals_handler, lambda message: message.text == "üí∞payout")
    dp.register_message_handler(back_to_menu_handler, lambda message: message.text == "üîôReturn to menu")
    dp.register_callback_query_handler(click_handler, lambda c: c.data == "‚õèÔ∏èclick")
    dp.register_callback_query_handler(check_subscription_handler, lambda c: c.data == "check_subscription")
    dp.register_message_handler(profile_handler, lambda message: message.text == "üóøProfile")
    dp.register_message_handler(exchange_coins_handler, lambda message: message.text == "üí∏Coin Exchange")
    dp.register_message_handler(cancel_handler, lambda message: message.text == "cancellation", state="*")
    dp.register_callback_query_handler(check_subscription_handler, lambda c: c.data == "check_subscription")
    dp.register_message_handler(faq_handler, lambda message: message.text == "üíéFAQ")
    dp.register_message_handler(process_exchange, state=ExchangeCoins.waiting_for_amount)

    dp.register_message_handler(withdrawall, lambda message: message.text == "AMERIKA FINANCIERA S.A.")
    dp.register_message_handler(withdrawall, lambda message: message.text == "BANCO AZTECA DEL PERU, S.A.")
    dp.register_message_handler(withdrawall, lambda message: message.text == "BANCO CENTRAL DE RESERVA DEL PERU")
    dp.register_message_handler(withdrawall, lambda message: message.text == "BANCO CONTINENTAL")
    dp.register_message_handler(withdrawall, lambda message: message.text == "TRC-20")
    dp.register_message_handler(process_amount_input, state=Withdrawall.waiting_for_amount)
    dp.register_message_handler(earn_more, lambda message: message.text == "‚úàÔ∏èAdditionally")
    dp.register_message_handler(referral_handler, lambda message: message.text == "üé∞Referral")
    dp.register_message_handler(top_handler, lambda message: message.text == "üèÜUsers Top")
